name: Pull Request checks

on:
  pull_request:
    branches:
      - main

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: hashicorp/setup-terraform@v2

      - name: Check out repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - uses: actions/cache@v2
        name: Cache plugin dir
        with:
          path: ~/.tflint.d/plugins
          key: tflint-${{ hashFiles('.tflint.hcl') }}

      - uses: terraform-linters/setup-tflint@v2.0.0
        name: Setup TFLint

      - uses: pre-commit/action@v3.0.0
        name: Pre-commit checks

  generate-readme:
    runs-on: ubuntu-latest
    steps:

      - name: Check out repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Render terraform docs and push changes back to PR
        uses: terraform-docs/gh-actions@main
        with:
          working-dir: .
          output-file: README.md
          output-method: replace
          template: |-
            # Terraform Private Vertex AI Workbench Notebooks Module
            
            This module deploys [Vertex AI Workbench User-Managed Notebooks](https://cloud.google.com/vertex-ai/docs/workbench/user-managed/introduction) and [Vertex AI Workbench Managed Notebooks](https://cloud.google.com/vertex-ai/docs/workbench/managed/introduction) on GCP that are private (interal IP only), while still remaining easily usable and accessible by the user of the notebook.
            
            ## Introduction
            
            User-Managed and Managed Notebooks on Vertex AI allow users to easily deploy GCE VMs with JupyterLab pre-installed. These VMs, by default, use external IP in order to spin up the instance (by running startup scripts), as well as to actually use the Jupyter notebook, such as installing Python libraries from PyPi or interacting with GitHub.
            
            The problem with this is the security issue that arises with external IP. GCE VM Security best practice states that VMs should not have an external IP assigned to it, unless absolutely necessary, as it opens the instance up to attack from the public internet. Therefore, by default, Vertex AI User-Managed Notebooks are, by default, vulnerable to attach from the public internet too.
            
            This Terraform module is the answer to this problem. The security and networking configuration that the Vertex Notebooks in this module use allows the Notebooks to be deployed with only internal IP (no external IP), while still maintaining the useability and accessibility (ie. can be still accessed directly via the GCP Vertex Workbench GUI by clicking the 'OPEN JUPYTERLAB' button).
            
            
            ## Architecture
            
            The following Notebook/Network Architecture is deployed in this module:
            
            
            ![Notebook/Network Archietcture ](./docs/images/private-notebooks.png "Notebook/Network Architecture")
            
            
            For more information about each component of this design, please refer to [ARCHITECTURE.md](./docs/ARCHITECTURE.md)
            
            ## Development
            
            ### Local setup
            
            - Install [pre-commit](https://pre-commit.com/)
            - Install the pre-commit hooks - `pre-commit install`
            
            ### README
            
            The README file is autogenerated using [`terraform-docs`](https://github.com/terraform-docs/terraform-docs). This is done when you create a pull request (or push to an existing PR).
            
            You can customise the template (including this text for example) in `.github/workflows/pr-checks.yml`.
            
            ## Usage
            
            There is an example of how to use this module in the [example](./example/) folder but simple usage is as follows:
            
            ```hcl
            module "private_vertex_nb_instances" {
              source                        = "<LINK TO MODULE SOURCE>"
              project                       = var.project
              zone                          = var.zone
              region                        = var.region
              notebooks                     = var.notebooks
              additional_vertex_nb_sa_roles = var.additional_vertex_nb_sa_roles
              vpc_network_name              = var.vpc_network_name
              subnet_ip_cidr_range          = var.subnet_ip_cidr_range
              vpc_sc_enabled                = false
              gcs_bucket_name               = var.gcs_bucket_name
              gcs_labels                    = var.gcs_labels
              additional_fw_rules           = var.additional_fw_rules
            }
            ```
            
            Then perform the following commands on the root folder:
            
            - `terraform init` to get the plugins
            - `terraform plan` to see the infrastructure plan
            - `terraform apply` to apply the infrastructure build
            - `terraform destroy` to destroy the built infrastructure

            {{ .Content }}
            
          git-push: "true"
